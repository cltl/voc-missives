<?xml version="1.0" encoding="UTF-8"?>
<!-- DTD NAF -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="naf_xml.xsd"/>
  <xs:element name="NAF">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="nafHeader"/>
        <xs:element ref="raw"/>
        <xs:element ref="topics"/>
        <xs:element ref="text"/>
        <xs:element ref="terms"/>
        <xs:element ref="deps"/>
        <xs:element ref="chunks"/>
        <xs:element ref="entities"/>
        <xs:element ref="coreferences"/>
        <xs:element ref="constituency"/>
        <xs:element ref="srl"/>
        <xs:element ref="opinions"/>
        <xs:element ref="timeExpressions"/>
        <xs:element ref="factualitylayer"/>
        <xs:element ref="tunits"/>
        <xs:element ref="locations"/>
        <xs:element ref="dates"/>
        <xs:element ref="temporalRelations"/>
        <xs:element ref="causalRelations"/>
        <xs:element ref="markables"/>
        <xs:element ref="attribution"/>
        <xs:element ref="factualities"/>
      </xs:choice>
      <xs:attribute name="doc"/>
      <xs:attribute name="version"/>
      <xs:attribute ref="xml:lang"/>
    </xs:complexType>
  </xs:element>
  <!-- NAF ELEMENT -->
  <!-- NAFHEADER ELEMENT -->
  <xs:element name="nafHeader">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="fileDesc"/>
        <xs:element minOccurs="0" ref="public"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="linguisticProcessors"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- FILEDESC ELEMENT -->
  <!--
    <fileDesc> is an empty element containing information about the
      computer document itself. It has the following attributes:
    
      - title: the title of the document (optional).
      - author: the author of the document (optional).
      - creationtime: when the document was created. In ISO 8601. (optional)
      - filename: the original file name (optional).
      - filetype: the original format (PDF, HTML, DOC, etc) (optional).
      - pages: number of pages of the original document (optional).
  -->
  <xs:element name="fileDesc">
    <xs:complexType>
      <xs:attribute name="title"/>
      <xs:attribute name="author"/>
      <xs:attribute name="creationtime"/>
      <xs:attribute name="filename"/>
      <xs:attribute name="filetype"/>
      <xs:attribute name="pages"/>
    </xs:complexType>
  </xs:element>
  <!-- PUBLIC ELEMENT -->
  <!--
    <public> is an empty element which stores public information about
      the document, such as its URI. It has the following attributes:
    
      - publicId: a public identifier (for instance, the number inserted by the capture server) (optional).
      - uri: a public URI of the document (optional).
    
  -->
  <xs:element name="public">
    <xs:complexType>
      <xs:attribute name="publicId"/>
      <xs:attribute name="uri"/>
    </xs:complexType>
  </xs:element>
  <!-- LINGUISTICPROCESSORS ELEMENT -->
  <!--
    <linguisticProcessors> elements store the information about which linguistic processors
      produced the NAF document. There can be several <linguisticProcessors> elements, one
        per NAF layer. NAF layers correspond to the top-level elements of the
        documents, such as "text", "terms", "deps" etc.
    
  -->
  <xs:element name="linguisticProcessors">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="lp"/>
      </xs:sequence>
      <xs:attribute name="layer" use="required"/>
    </xs:complexType>
  </xs:element>
  <!-- LP ELEMENT -->
  <!--
    <lp> elements describe one specific linguistic processor. <lp> elements 
        have the following attributes:
    
        - name: the name of the processor
        - version: processor's version
        - timestamp: a timestamp, denoting the date/time at which the processor was
        launched. The timestamp follows the XML Schema xs:dateTime type (See
        http://www.w3.org/TR/xmlschema-2/#isoformats). In summary, the date is
        specified following the form "YYYY-MM-DDThh:mm:ss" (all fields
        required). To specify a time zone, you can either enter a dateTime in UTC
        time by adding a "Z" behind the time ("2002-05-30T09:00:00Z") or you can
        specify an offset from the UTC time by adding a positive or negative time
        behind the time ("2002-05-30T09:00:00+06:00").
        - beginTimestamp (optional): a timestamp, denoting the date/time at
        which the processor started the process. It follows the XML Schema
        xs:dateTime format.
        - endTimestamp (optional): a timestamp, denoting the date/time at
        which the processor ended the process. It follows the XML Schema
        xs:dateTime format.
    
  -->
  <xs:element name="lp">
    <xs:complexType>
      <xs:attribute name="name" use="required"/>
      <xs:attribute name="version" use="required"/>
      <xs:attribute name="timestamp"/>
      <xs:attribute name="beginTimestamp"/>
      <xs:attribute name="endTimestamp"/>
      <xs:attribute name="hostname"/>
    </xs:complexType>
  </xs:element>
  <!-- RAW ELEMENT -->
  <xs:element name="raw" type="xs:string"/>
  <!-- TOPICS ELEMENT -->
  <xs:element name="topics">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="topic"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- TOPIC ELEMENT -->
  <xs:element name="topic">
    <xs:complexType mixed="true">
      <xs:attribute name="source"/>
      <xs:attribute name="method"/>
      <xs:attribute name="confidence"/>
      <xs:attribute name="uri"/>
    </xs:complexType>
  </xs:element>
  <!-- TEXT ELEMENT -->
  <xs:element name="text">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="wf"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- WORDFORM ELEMENT -->
  <!--
    <wf> elements describe and contain all word foorms generated after the tokenization step
      <wf> elements have the following attributes:
        - id: the id of the word form (REQUIRED and UNIQUE)
        - sent: sentence id of the word form (optional)
        - para: paragraph id of the word form (optional)
        - page: page id of the word form (optional)
        - offset: the offset (in characters) of the word form (optional)
        - length: the length (in characters) of the word form (optional)
        - xpath: in case of source xml files, the xpath expression identifying the original word form (optional)
    
  -->
  <xs:element name="wf">
    <xs:complexType mixed="true">
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="sent"/>
      <xs:attribute name="para"/>
      <xs:attribute name="page"/>
      <xs:attribute name="offset" use="required"/>
      <xs:attribute name="length" use="required"/>
      <xs:attribute name="xpath"/>
    </xs:complexType>
  </xs:element>
  <!-- TERMS ELEMENT -->
  <xs:element name="terms">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="term"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- TERM ELEMENT -->
  <!--
    attributes of term elements
    
    id: unique identifier (REQUIRED AND UNIQUE)
    
    type: type of the term. (REQUIRED) Currently, 3 values are possible:
    open: open category term
    close: close category term
    
    lemma: lemma of the term (REQUIRED).
    
    pos: part of speech. (REQUIRED) The first letter of the pos attribute
    must be one of the following:
    
    N   common noun
    R   proper noun
    G   adjective
    V   verb
    P   preposition
    A   adverb
    C   conjunction
    D   determiner
    O   other
    
    more complex pos attributes may be formed by concatenating values separated
    by a dot ".". For example, in Basque we have "V.ADI.SIN" for simple verbs
    or "V.ADI.KON" for complex verbs.
    
    morphofeat: morphosyntactic feature encoded as a single attribute.
    
    case: declension case of the term (otpional).
    
    head: if the term is a compound, the id of the head component (otpional).
  -->
  <xs:element name="term">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" ref="sentiment"/>
        <xs:element ref="span"/>
        <xs:element ref="externalReferences"/>
        <xs:element ref="component"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type"/>
      <xs:attribute name="lemma"/>
      <xs:attribute name="pos"/>
      <xs:attribute name="morphofeat"/>
      <xs:attribute name="netype"/>
      <xs:attribute name="case"/>
      <xs:attribute name="head"/>
    </xs:complexType>
  </xs:element>
  <!-- SENTIMENT FEATURES ELEMENTS -->
  <!--
    <sentiment> elements have the following sub-element:
      - Resource: identifier and reference to an external sentiment resource 
      - Polarity: Refers to the property of a word to express positive, negative or no sentiment. These values are possible: 
      - Positive
      - Negative
      - Neutral
      - Or numerical value on a numerical scale
      - Strength: refers to the strength of the polarity
      - Weak
      - Average
      - Strong
      - Or Numerical value
      - Subjectivity: refers to the property of a words to express an opionion (or not)
      - Subjective/Objective
      - Factual/opinionated
      - Sentiment_semantic_type: refers to a sentiment-related semantic type
      - Aesthetics_evaluation
      - Moral_judgment
      - Emotion
      - etc
      - Sentiment modifier: refers to words which modify  the polarity of another word
      - Intensifier/weakener polarity shifter
      - Sentiment_marker: refers to words which themselves do not carry polarity, but are kind of vehicles of it
      - Find, think, in my opinion, according to....
      - Sentiment_product_feature: refers to a domain; mainly used in feature-based sentiment analysis
      - Values are related to specific domain. For the tourist domain, for example, staff, cleanliness, beds, bathroom, transportation, location, etc.. 
  -->
  <xs:element name="sentiment">
    <xs:complexType>
      <xs:attribute name="resource"/>
      <xs:attribute name="polarity"/>
      <xs:attribute name="strength"/>
      <xs:attribute name="subjectivity"/>
      <xs:attribute name="sentiment_semantic_type"/>
      <xs:attribute name="sentiment_product_feature"/>
      <xs:attribute name="sentiment_modifier"/>
      <xs:attribute name="sentiment_marker"/>
    </xs:complexType>
  </xs:element>
  <!-- EXTERNALREFERENCES ELEMENT -->
  <!--
    The <externalReferences> element is used to associate terms to
    external resources, such as elements of a Knowledge base, an ontology,
    etc. It consists of several <externalRef> elements, one per
    association.
  -->
  <xs:element name="externalReferences">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="externalRef"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- EXTERNALREF ELEMENT -->
  <!--
    <externalRef> elements have the following attributes:- resource: indicates the identifier of the resource referred to. 
      - reference: code of the referred element. If the element is a
      synset of some version of WordNet, it follows the pattern:
    
      [a-z]{3}-[0-9]{2}-[0-9]+-[nvars]
    
      which is a string composed by four fields separated by a dash. 
      The four fields are the following:
    
    
      - Language code (three characters).
      - WordNet version (two digits).
      - Synset identifier composed by digits.
      - POS character:
      n noun
      v verb
      a adjective
      r adverb
      examples of valid patterns are: ``ENG-20-12345678-n'', 
      ``SPA-16-017403-v'', etc.
      - confidence: a floating number between 0 and 1. Indicates the confidence weight of the association
  -->
  <xs:element name="externalRef">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="sentiment"/>
        <xs:element ref="externalRef"/>
      </xs:choice>
      <xs:attribute name="resource"/>
      <xs:attribute name="reference" use="required"/>
      <xs:attribute name="reftype"/>
      <xs:attribute name="status"/>
      <xs:attribute name="source"/>
      <xs:attribute name="confidence"/>
    </xs:complexType>
  </xs:element>
  <!-- COMPONENT ELEMENT -->
  <!--
    Compound and multiword terms can be represented in NAF by including <component> elements within <term> elements.
    The <component> elements have the following attributes:
    -   id: unique identifier (REQUIRED and UNIQUE)
    -   lemma: lemma of the term (REQUIRED)
    -   pos: part of speech (REQUIRED)
    -   case: declension case (optional) 
    
  -->
  <xs:element name="component">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" ref="sentiment"/>
        <xs:element ref="span"/>
        <xs:element ref="externalReferences"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type"/>
      <xs:attribute name="lemma"/>
      <xs:attribute name="pos"/>
      <xs:attribute name="morphofeat"/>
      <xs:attribute name="netype"/>
      <xs:attribute name="case"/>
      <xs:attribute name="head"/>
    </xs:complexType>
  </xs:element>
  <!-- MARKABLES ELEMENT -->
  <xs:element name="markables">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="mark"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="mark">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" ref="sentiment"/>
        <xs:element ref="span"/>
        <xs:element ref="externalReferences"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type"/>
      <xs:attribute name="lemma"/>
      <xs:attribute name="pos"/>
      <xs:attribute name="morphofeat"/>
      <xs:attribute name="case"/>
      <xs:attribute name="source"/>
    </xs:complexType>
  </xs:element>
  <!-- DEPS ELEMENT -->
  <xs:element name="deps">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="dep"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- DEP ELEMENT -->
  <!--
    The <dep> elements have the following attributes:
    -   from: term id of the source element (REQUIRED)
    -   to: term id of the target element (REQUIRED)
    -   rfunc: relational function.(REQUIRED)
    -       case: declension case (optional)
  -->
  <xs:element name="dep">
    <xs:complexType>
      <xs:attribute name="from" use="required" type="xs:IDREF"/>
      <xs:attribute name="to" use="required" type="xs:IDREF"/>
      <xs:attribute name="rfunc" use="required"/>
      <xs:attribute name="case"/>
    </xs:complexType>
  </xs:element>
  <!-- CHUNKS ELEMENT -->
  <xs:element name="chunks">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="chunk"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- CHUNK ELEMENT -->
  <!--
    The <chunk> elements have the following attributes:
    -   id: unique identifier (REQUIRED)
    -   head: the chunk head’s term id  (REQUIRED)
    -   phrase: type of the phrase (REQUIRED)
    -   case: declension case (optional)
  -->
  <xs:element name="chunk">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="head" use="required" type="xs:IDREF"/>
      <xs:attribute name="phrase" use="required"/>
      <xs:attribute name="case"/>
    </xs:complexType>
  </xs:element>
  <!-- ENTITIES ELEMENT -->
  <xs:element name="entities">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="entity"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- ENTITY ELEMENT -->
  <!--
    A named entity element has the following attributes: 
    -   id: the id for the named entity (REQUIRED)
    -   type:  type of the named entity. (REQUIRED) Currently, 8 values are possible: 
    -   Person
    -   Organization
    -   Location
    -   Date
    -   Time
    -   Money
    -   Percent
    -   Misc 
  -->
  <xs:element name="entity">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="references"/>
        <xs:element ref="externalReferences"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type" use="required"/>
      <xs:attribute name="source"/>
    </xs:complexType>
  </xs:element>
  <!-- COREFERENCES ELEMENT -->
  <xs:element name="coreferences">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="coref"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- COREF ELEMENT -->
  <!--
    <coref> element has the following attribute:
      - id: unique id, starting with the prefix "co"
      -       type: type of the coref set (entity, event, etc)
  -->
  <xs:element name="coref">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="span"/>
        <xs:element ref="externalReferences"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type"/>
    </xs:complexType>
  </xs:element>
  <!-- CONSITUENCY PARSING -->
  <xs:element name="constituency">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="tree"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="tree">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="nt"/>
        <xs:element ref="t"/>
        <xs:element ref="edge"/>
      </xs:choice>
      <xs:attribute name="type"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="nt">
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="label" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="t">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="span"/>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="edge">
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="from" use="required" type="xs:IDREF"/>
      <xs:attribute name="to" use="required" type="xs:IDREF"/>
      <xs:attribute name="head"/>
    </xs:complexType>
  </xs:element>
  <!-- SEMANTIC ROLE LABELING -->
  <xs:element name="srl">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="predicate"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="predicate">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="externalReferences"/>
        <xs:element ref="span"/>
        <xs:element ref="role"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="uri"/>
      <xs:attribute name="confidence"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="role">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="externalReferences"/>
        <xs:element ref="span"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="uri"/>
      <xs:attribute name="confidence"/>
      <xs:attribute name="semRole" use="required"/>
    </xs:complexType>
  </xs:element>
  <!-- OPINIONS ELEMENT -->
  <xs:element name="opinions">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="opinion"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- OPINION ELEMENT -->
  <!--
    The <opinion> layer has one attribute: 
    -   id:  the unique identifier of the opinion
    
    The <opinion> layer consists of the following subelement:
    -   opinion_holder:  whose opinion: speaker or some actor in the text
    -   opinion _target :  about what
    -   opinion_expression: the expression
    
  -->
  <xs:element name="opinion">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="opinion_holder"/>
        <xs:element ref="opinion_target"/>
        <xs:element ref="opinion_expression"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <!-- OPINION_HOLDER AND OPINION_TARGET ELEMENT -->
  <!--
    <opinion_holder> and <opinion_target> elements have the following sub-element:
        -   span: this element spans the target  term. Target elements are used to refer to the target term,, using term ids. If the term is a multiword, multiple target elements are used.
  -->
  <xs:element name="opinion_holder">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
      <xs:attribute name="type"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="opinion_target">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
      <xs:attribute name="type"/>
    </xs:complexType>
  </xs:element>
  <!-- OPINION_EXPRESSION -->
  <!--
    <opinion_expression> has the following attributes:
      - polarity:  refers to the positive or negative orientation of the expression
      - strength:  refers to the strength of the expression
      - subjectivity:  refers to whether an expression is subjective or not
      - sentiment_semantic_type:  refers to sentiment related semantic types like emotion, judgment, belief, speculation
      - sentiment_product_feature :  refers to specific features of entities, to be used in feature/aspect-based sentiment analysis
  -->
  <xs:element name="opinion_expression">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
      <xs:attribute name="polarity"/>
      <xs:attribute name="strength"/>
      <xs:attribute name="subjectivity"/>
      <xs:attribute name="sentiment_semantic_type"/>
      <xs:attribute name="sentiment_product_feature"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="timeExpressions">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="timex3"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- timex3 expressions -->
  <xs:element name="timex3">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type" use="required"/>
      <xs:attribute name="beginPoint" type="xs:IDREF"/>
      <xs:attribute name="endPoint" type="xs:IDREF"/>
      <xs:attribute name="quant"/>
      <xs:attribute name="freq"/>
      <xs:attribute name="functionInDocument"/>
      <xs:attribute name="temporalFunction"/>
      <xs:attribute name="value"/>
      <xs:attribute name="valueFromFunction"/>
      <xs:attribute name="mod"/>
      <xs:attribute name="anchorTimeID" type="xs:IDREF"/>
    </xs:complexType>
  </xs:element>
  <!-- time relations -->
  <xs:element name="temporalRelations">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="tlink"/>
        <xs:element ref="predicateAnchor"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="tlink">
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="from" use="required" type="xs:IDREF"/>
      <xs:attribute name="to" use="required" type="xs:IDREF"/>
      <xs:attribute name="fromType" use="required"/>
      <xs:attribute name="toType" use="required"/>
      <xs:attribute name="relType" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="predicateAnchor">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="anchorTime" type="xs:IDREF"/>
      <xs:attribute name="beginPoint" type="xs:IDREF"/>
      <xs:attribute name="endPoint" type="xs:IDREF"/>
    </xs:complexType>
  </xs:element>
  <!-- causal relations -->
  <xs:element name="causalRelations">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="clink"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="clink">
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="from" use="required" type="xs:IDREF"/>
      <xs:attribute name="to" use="required" type="xs:IDREF"/>
      <xs:attribute name="relType"/>
    </xs:complexType>
  </xs:element>
  <!-- attribution layer -->
  <xs:element name="attribution">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="statement"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="statement">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="statement_target"/>
        <xs:element ref="statement_source"/>
        <xs:element ref="statement_cue"/>
      </xs:choice>
      <xs:attribute name="id" use="required" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="statement_target">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="span"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="statement_source">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="span"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="statement_cue">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="span"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- factuality layer -->
  <xs:element name="factualities">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="factuality"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="factuality">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="span"/>
        <xs:element maxOccurs="unbounded" ref="factVal"/>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:ID"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="factVal">
    <xs:complexType>
      <xs:attribute name="value" use="required"/>
      <xs:attribute name="resource" use="required"/>
      <xs:attribute name="confidence"/>
      <xs:attribute name="source"/>
    </xs:complexType>
  </xs:element>
  <!-- factuality layer (old) -->
  <xs:element name="factualitylayer">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="factvalue"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="factvalue">
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:IDREF"/>
      <xs:attribute name="prediction" use="required"/>
      <xs:attribute name="confidence"/>
    </xs:complexType>
  </xs:element>
  <!-- REFERENCES AND SPANS -->
  <!--  REFERENCES ELEMENT (only used in Entity layer) -->
  <xs:element name="references">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="span"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- SPAN ELEMENT -->
  <xs:element name="span">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="target"/>
      </xs:sequence>
      <xs:attribute name="primary"/>
    </xs:complexType>
  </xs:element>
  <!-- TARGET ELEMENT -->
  <xs:element name="target">
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:IDREF"/>
      <xs:attribute name="head"/>
    </xs:complexType>
  </xs:element>
  <!-- TUNITS ELEMENT -->
  <!-- The text-units layer identifies elements such as headings, paragraphs, notes, etc. -->
  <xs:element name="tunits">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="tunit"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- TUNIT ELEMENT -->
  <xs:element name="tunit">
    <xs:complexType>
      <xs:attribute name="id" use="required" type="xs:ID"/>
      <xs:attribute name="type"/>
      <xs:attribute name="offset" use="required"/>
      <xs:attribute name="length" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="locations" type="xs:string"/>
  <xs:element name="dates" type="xs:string"/>
</xs:schema>
<!-- OLD ELEMENTS DEPRECATED -->
<!--
  <!ELEMENT events (event)+>
  <!ELEMENT event (roles)+>
  <!ATTLIST event
            id ID #REQUIRED
            span IDREF #REQUIRED
            lemma CDATA #REQUIRED
            pos CDATA #REQUIRED
            eiid CDATA #IMPLIED
            class CDATA #IMPLIED
            tense CDATA #IMPLIED
            aspect CDATA #IMPLIED
            polarity CDATA #IMPLIED>
  
  <!ELEMENT roles (role)+>
  <!ELEMENT role EMPTY>
  <!ATTLIST role
            id IDREF #REQUIRED
            role CDATA #REQUIRED>
  
  <!ELEMENT quantifiers (quantifier)+>
  <!ELEMENT quantifier (span)+>
  <!ATTLIST quantifier
            qid ID #REQUIRED>
  
-->
